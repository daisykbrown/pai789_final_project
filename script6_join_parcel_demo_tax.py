# -*- coding: utf-8 -*-"""@author: daisybrown"""import pandas as pdimport geopandas as gpdimport os#%%# setting the output file for the new layers to go into the appropriate geo packageout_file = "flood_levels.gpkg"if os.path.exists(out_file):    os.remove(out_file)# setting a projection variable for NC statenc_epsg = 2264# reading in the approproate shape files for FFEftp_file = "./Input Files/Columbus_FP_Info.gpkg"# setting the projection for the fp fileftp = gpd.read_file(ftp_file, layer='Building_Centroids') ftp = ftp.to_crs(epsg=nc_epsg)# trimming the geospatial data for relevent columns and setting the block_id column # to match the block group id in the demographic datatrim_ftp = ftp.copy()trim_ftp['BLOCK_ID'] = ftp['BLOCK_ID'].astype(str)trim_ftp["BLOCK_ID"] = trim_ftp["BLOCK_ID"].str[:12]trim_ftp = trim_ftp[['BLOCK_ID', 'LIDAR_LAG', 'LIDAR_HAG', 'YEAR_BUILT', 'BLDG_VALUE', 'FFE',                    'FOUND_TYPE', 'Shape_Length',                   'Shape_Area', "geometry"]]#%%# reading in demographics filebg_tract = "nc_bg_tract_merged.csv"demo = pd.read_csv(bg_tract)demo['geoid'] = demo['geoid'].astype(str)demo = demo.set_index('geoid')# joining demo data on trimmed fp data to create a new layer in the geopackage# with the combined datajoined_demo = trim_ftp.merge(demo,                        left_on="BLOCK_ID",                        right_on="geoid",                        validate="m:1",                        indicator=True)print(joined_demo.value_counts('_merge'))joined_demo = joined_demo.drop(columns=['_merge'])#%%# joining parcel value tax data downloaded from Columbus County onto the joined_demo # to create a new layer# reading in tax parcel shapefile data from Columbus County and trimming txparcel_file = "./Input Files/parcels.shp"txparcel = gpd.read_file(txparcel_file, layer ='parcels')txparcel = txparcel.to_crs(epsg=nc_epsg)txparcel = txparcel[['pin', 'owner', 'addr1', 'addr2', 'addr3', 'zip', 'taxvalue',                   'land_class', 'geometry']]# joining tax parcel shapefiles to joined_demojoined_tax = joined_demo.sjoin(txparcel, how='left', predicate='within')joined_tax = joined_tax.reset_index()joined_tax = joined_tax.drop_duplicates(subset='index')joined_tax = joined_tax.drop(columns='index')joined_tax.to_file(out_file, layer = "ftp_demo_tax", index=False)