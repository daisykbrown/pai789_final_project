# -*- coding: utf-8 -*-"""@author: daisybrown"""import pandas as pdimport geopandas as gpdimport geotools#%%# setting the output fileout_file = "flood_levels.gpkg"# setting a projection variablenc_epsg = 2264# reading in the approproate shape files for FFEfp_file = "../GIS/County Building Data/Columbus_FP_Info.gpkg"# setting the projectionfp = gpd.read_file(fp_file)fp = fp.to_crs(epsg=nc_epsg)# trimming the geospatial data for releventtrim_fp = fp.copy()trim_fp['BLOCK_ID'] = fp['BLOCK_ID'].astype(str)trim_fp["BLOCK_ID"] = trim_fp["BLOCK_ID"].str[:12]trim_fp = trim_fp[['BLDG_ID', 'PID', 'BLOCK_ID', 'OCCUP_TYPE', 'BUILD_TYPE',                   'YEAR_BUILT', 'YRBUILTSRC', 'BLDG_VALUE', 'HTD_SQ_FT', 'FFE',                    'FFE_TYP', 'LIDAR_LAG', 'LIDAR_HAG', 'FOUND_TYPE', 'Shape_Length',                   'Shape_Area', "geometry"]]#%%# reading in the parcel NC One Dataparcel_file = "../GIS/County Parcel Data/columbus_parcels_NCONE/nc_columbus_parcels_poly.shp"# setting the projection parcel = gpd.read_file(parcel_file)parcel = parcel.to_crs(epsg=nc_epsg)# trimming the geospatial data for relevent columnstrim_parcel = parcel.copy()trim_parcel = trim_parcel[['ALTPARNO', 'CNTYFIPS', 'CNTYNAME', 'GISACRES', 'LANDVAL',                          'MAILADD', 'MCITY', 'MSTATE', 'MZIP', 'NPARNO', 'OWNNAME',                          'PARNO', 'PARUSECD2', 'PARUSECODE', 'PARUSEDESC', 'PARUSEDSC2',                           'PARVAL','SALEDATE', "geometry"]]#%%# joining FP centroid onto parcel polygonjoined = trim_fp.sjoin(trim_parcel, how='left', predicate='within')#%%# reading in demographics filedemo = pd.read_csv("nc_bg_tract_merged.csv")demo['geoid'] = demo['geoid'].astype(str)demo = demo.set_index('geoid')# joining demo data on trimmed fp data to create a new layer in the geopackage# with the combined datajoined_demo = joined.merge(demo,                        left_on="BLOCK_ID",                        right_on="geoid",                        validate="m:1",                        indicator=True)print(joined_demo.value_counts('_merge'))joined_demo = joined_demo.drop(columns='_merge')#%%joined_demo.to_file(out_file, layer = "fp_demo", index=False)